#include "GraphicsLibrary/Drawing/Strings.h"

char testText[] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";

char allCharacters[] = {32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,
84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,0};

bool characters[] = 
{
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 
0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0, // !
0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0, // #
0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,
0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,
0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,
0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0, // (
0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0, // )
0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0, // ,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0, // /
0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0, //0
0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,
0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,
0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,
1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0, //9
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0, //:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0, // ?
0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0, // @
0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1, //A
1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,
1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,
1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,
1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0, //F
0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,
1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,
0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,
1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,
1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1, //L
1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,
1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,
0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,1,
1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1, //R
0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,
1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,
1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0, //W
1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,
1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,
1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1, //Z
0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0, // [
1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,
0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,
0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // `
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1, //a
1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,
0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,
0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0, //f
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,
1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,
1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1, //k
0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1, //q
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,
0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0, //v
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1, //z
0,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1, // {
0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,
1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 // ~

};

int charInfo_SPACE[] = {0};
int charInfo_EXCLAIM[] = { 1,2,0,1,7, 1,2,8,1,1, 0 };
int charInfo_DBLQUOTE[] = { 1,1,0,1,2, 1,3,0,1,2, 0 };
int charInfo_POUND[] = { 1,0,3,5,1, 1,0,5,5,1, 1,1,2,1,5, 1,3,2,1,5, 0 };
int charInfo_DOLSIGN[] = { 2,1,1,-1,1, 1,1,1,3,1, 2,3,1,1,1, 1,4,2,1,1, 1,0,2,1,2, 2,0,4,1,1, 1,1,4,3,1, 2,3,4,1,1, 1,4,5,1,2, 2,4,7,-1,1, 1,1,7,3,1, 2,0,7,1,1, 1,0,6,1,1, 1,2,0,1,9, 0 };
int charInfo_PERCENT[] = { 1,0,1,2,2, 1,3,6,2,2, 2,4,2,-4,5, 0 };
int charInfo_ADDRESS[] = { 1,1,0,2,1, 1,3,1,1,1, 1,0,1,1,1, 2,1,0,-1,1, 2,2,0,1,1, 2,0,2,4,7, 2,3,2,-3,3, 1,0,5,1,3, 2,4,5,-2,4, 2,0,8,1,1, 1,1,8,2,1, 0};
int charInfo_SNGLQUOTE[] = { 1,2,0,1,2, 0 };
int charInfo_OPENPAREN[] = { 2,3,0,-2,2, 2,1,7,2,2, 1,1,2,1,5, 0 };
int charInfo_CLOSEPAREN[] = { 2,1,0,2,2, 2,3,7,-2,2, 1,3,2,1,5, 0 };
int charInfo_STAR[] = { 1,2,0,1,4, 2,0,1,4,2, 2,4,1,-4,2, 0 };
int charInfo_PLUS[] = { 1,2,2,1,5, 1,0,4,5,1, 0 };
int charInfo_COMMA[] = { 1,2,6,1,2, 2,2,8,-1,1, 0 };
int charInfo_MINUS[] = { 1,0,4,5,1, 0 };
int charInfo_PERIOD[] = { 1,2,8,1,1, 0 };
int charInfo_SLASH[] = { 2,4,0,-4,9, 0 };

int charInfo_0[] = { 1,0,1,1,7, 1,1,0,3,1, 1,1,8,3,1, 2,1,0,-1,1, 2,0,8,1,1, 2,3,0,1,1, 2,4,8,-1,1, 1,4,1,1,7, 2,4,2,-4,5, 0 };
int charInfo_1[] = { 1,2,0,1,9, 1,0,8,5,1, 2,2,0,-2,2, 0 };
int charInfo_2[] = { 1,0,1,1,1, 2,1,0,-1,1, 1,1,0,3,1, 2,3,0,1,1, 1,4,1,1,2, 2,4,3,-4,6, 1,1,8,4,1, 0 };
int charInfo_3[] = { 1,0,1,1,1, 1,0,7,1,1, 2,1,0,-1,1, 2,0,8,1,1, 1,1,0,3,1, 1,1,4,3,1, 1,1,8,3,1, 1,4,1,1,3, 1,4,5,1,3, 2,3,0,1,1, 2,3,4,1,1, 2,4,4,-1,1, 2,4,8,-1,1, 0 };
int charInfo_4[] = { 1,0,0,1,5, 1,4,0,1,9, 1,1,4,3,1, 0 };
int charInfo_5[] = { 1,0,0,5,1, 1,0,1,1,4, 1,1,4,3,1, 2,3,4,1,1, 1,4,5,1,3, 2,4,8,-1,1, 1,1,8,3,1, 2,0,8,1,1, 1,0,7,1,1, 0 };
int charInfo_6[] = { 1,1,0,3,1, 2,1,0,-1,1, 2,3,0,1,1, 1,4,1,1,1, 1,0,1,1,7, 1,1,4,3,1, 2,3,4,1,1, 1,4,5,1,3, 2,4,8,-1,1, 1,1,8,3,1, 2,0,8,1,1, 0 };
int charInfo_7[] = { 1,0,0,5,1, 2,4,1,-4,8, 0 };
int charInfo_8[] = { 1,0,1,1,3, 1,0,5,1,3, 2,1,0,-1,1, 2,0,8,1,1, 1,1,0,3,1, 1,1,4,3,1, 1,1,8,3,1, 1,4,1,1,3, 1,4,5,1,3, 2,3,0,1,1, 2,3,4,1,1, 2,4,4,-1,1, 2,4,8,-1,1, 2,0,4,1,1, 2,1,4,-1,1, 0 };
int charInfo_9[] = { 1,0,1,1,3, 1,0,7,1,1, 2,1,0,-1,1, 2,0,8,1,1, 1,1,0,3,1, 1,1,4,3,1, 1,1,8,3,1, 1,4,1,1,7, 2,3,0,1,1, 2,4,8,-1,1, 2,0,4,1,1, 0 };

int charInfo_COLON[] = { 1,2,3,1,1, 1,2,6,1,1, 0 };
int charInfo_SEMICOLON[] = { 1,2,3,1,1, 1,2,6,1,1, 2,2,7,-1,1, 0 };
int charInfo_LESSTHAN[] = { 2,4,3,-4,2, 2,0,5,4,2, 0 };
int charInfo_EQUAL[] = { 1,0,3,5,1, 1,0,5,5,1, 0 };
int charInfo_GREATERTHAN[] = { 2,0,3,4,2, 2,4,5,-4,2, 0 };
int charInfo_QUESTION[] = { 1,1,0,3,1, 2,1,0,-1,1, 2,3,0,1,1, 1,0,1,1,1, 1,4,1,1,2, 2,4,3,-2,2, 1,2,5,1,2, 1,2,8,1,1, 0  };
int charInfo_ATSIGN[] = { 1,1,1,3,1, 1,0,2,1,5, 1,4,2,1,4, 1,1,7,3,1, 2,2,5,1,1, 2,3,3,-1,1, 1,3,5,1,1, 1,2,4,1,1, 2,3,3,1,1, 2,1,1,-1,1, 2,3,1,1,1, 2,0,7,1,1, 2,4,7,-1,1, 0 };

int charInfo_A[] = { 2,2,0,-2,5, 2,2,0,2,5, 1,0,5,5,1, 1,0,5,1,4, 1,4,5,1,4, 0 };
int charInfo_B[] = { 1,0,0,1,9, 1,1,0,3,1, 1,1,4,3,1, 1,1,8,3,1, 1,4,1,1,3, 1,4,5,1,3, 2,3,0,1,1, 2,3,4,1,1, 2,4,4,-1,1, 2,4,8,-1,1, 0 };
int charInfo_C[] ={ 1,0,1,1,7, 1,1,0,3,1, 1,1,8,3,1, 2,1,0,-1,1, 2,0,8,1,1, 2,3,0,1,1, 2,4,8,-1,1, 1,4,1,1,1, 1,4,7,1,1, 0};
int charInfo_D[] = { 1,0,0,1,9, 1,0,0,3,1, 1,0,8,3,1, 2,2,0,2,2, 2,4,7,-2,2, 1,4,2,1,5, 0 };
int charInfo_E[] = { 1,0,0,1,9, 1,0,0,5,1, 1,0,4,5,1, 1,0,8,5,1, 0 };
int charInfo_F[] = { 1,0,0,1,9, 1,0,0,5,1, 1,0,4,5,1, 0 };
int charInfo_G[] = { 1,0,1,1,7, 1,1,0,3,1, 1,1,8,3,1, 2,1,0,-1,1, 2,0,8,1,1, 2,3,0,1,1, 1,4,1,1,1, 2,4,8,-1,1, 1,4,4,1,4, 1,3,4,1,1, 0 };
int charInfo_H[] = { 1,0,0,1,9, 1,4,0,1,9, 1,0,4,5,1, 0 };
int charInfo_I[] = { 1,2,0,1,9, 1,0,0,5,1, 1,0,8,5,1, 0 };
int charInfo_J[] = { 1,0,0,5,1, 1,3,1,1,7, 2,0,8,1,1, 2,3,8,-1,1, 1,0,6,1,2, 1,1,8,2,1, 0 };
int charInfo_K[] = { 1,0,0,1,9, 2,4,0,-4,5, 2,0,4,4,5, 0 };
int charInfo_L[] = { 1,0,0,1,9, 1,0,8,5,1, 0 };
int charInfo_M[] = { 1,0,0,1,9, 1,4,0,1,9, 2,0,0,2,4, 2,4,0,-2,4, 1,2,4,0,1, 0 };
int charInfo_N[] = { 1,0,0,1,9, 1,4,0,1,9, 2,0,0,4,9, 0 };
int charInfo_O[] = { 1,0,1,1,7, 1,1,0,3,1, 1,1,8,3,1, 2,1,0,-1,1, 2,0,8,1,1, 2,3,0,1,1, 2,4,8,-1,1, 1,4,1,1,7, 0 };
int charInfo_P[] = { 1,0,0,1,9, 1,1,0,3,1, 1,1,4,3,1, 2,3,0,1,1, 2,4,4,-1,1, 1,4,1,1,3, 0 };
int charInfo_Q[] = { 1,0,1,1,7, 1,1,0,3,1, 1,1,8,2,1, 1,4,1,1,6, 2,1,0,-1,1, 2,0,8,1,1, 2,3,0,1,1, 2,4,7,-2,2, 2,2,6,2,3, 0 };
int charInfo_R[] = { 1,0,0,1,9, 1,1,0,3,1, 1,1,4,3,1, 2,3,0,1,1, 2,4,4,-1,1, 1,4,1,1,3, 2,1,5,3,4, 0 };
int charInfo_S[] = { 2,1,0,-1,1, 1,1,0,3,1, 2,3,0,1,1, 1,4,1,1,1, 1,0,1,1,3, 2,0,4,1,1, 1,1,4,3,1, 2,3,4,1,1, 1,4,5,1,3, 2,4,8,-1,1, 1,1,8,3,1, 2,0,8,1,1, 1,0,7,1,1, 0 };
int charInfo_T[] = { 1,0,0,5,1, 1,2,1,1,8, 0 };
int charInfo_U[] = { 1,0,0,1,7, 1,4,0,1,7, 2,0,7,2,2, 1,2,8,1,1, 2,4,7,-2,2, 0 };
int charInfo_V[] = { 2,0,0,2,9, 2,4,0,-2,9, 0 };
int charInfo_W[] = { 1,0,0,1,9, 1,4,0,1,9, 2,2,5,-2,4, 2,2,5,2,4, 1,2,5,1,1, 0 };
int charInfo_X[] = { 2,0,0,4,9, 2,4,0,-4,9, 0 };
int charInfo_Y[] = { 2,0,0,2,5, 2,4,0,-2,5, 1,2,5,1,4, 0 };
int charInfo_Z[] = { 1,0,0,5,1, 1,0,8,5,1, 2,4,1,-4,7, 0 };

int charInfo_OPENBRACKET[] = { 1,1,0,3,1, 1,1,8,3,1, 1,1,0,1,8, 0 };
int charInfo_BACKSLASH[] = {2,0,0,4,9, 0};
int charInfo_CLOSEBRACKET[] = { 1,1,0,3,1, 1,1,8,3,1, 1,3,0,1,8, 0 };
int charInfo_CARET[] = {2,2,0,-2,3, 2,2,0,2,3, 0};
int charInfo_UNDER[] = {1,0,8,5,1, 0};
int charInfo_ACCENT[] = { 2,2,0,1,2, 0 };

int charInfo_a[] = { 1,1,4,2,1, 1,0,5,1,3, 2,1,4,-1,1, 2,0,8,1,1, 1,1,8,2,1, 2,2,4,2,2, 2,4,7,-2,2, 1,4,4,1,5, 0};
int charInfo_b[] = { 1,0,0,1,9, 2,2,4,-2,2, 2,0,7,2,2, 1,2,4,2,1, 1,2,8,2,1, 2,3,4,1,1, 2,4,8,-1,1, 1,4,5,1,3, 0};
int charInfo_c[] = { 1,1,4,3,1, 1,0,5,1,3, 2,1,4,-1,1, 2,0,8,1,1, 1,1,8,3,1, 2,3,4,1,1, 2,4,8,-1,1, 1,4,5,1,1, 1,4,7,1,1, 0};
int charInfo_d[] = { 1,1,4,2,1, 1,0,5,1,3, 2,1,4,-1,1, 2,0,8,1,1, 1,1,8,2,1, 2,2,4,2,2, 2,4,7,-2,2, 1,4,0,1,9, 0};
int charInfo_e[] = { 1,1,4,3,1, 1,0,5,1,3, 2,1,4,-1,1, 2,0,8,1,1, 1,1,8,3,1, 2,3,4,1,1, 2,4,8,-1,1, 1,4,5,1,1, 1,1,6,4,1, 0};
int charInfo_f[] = { 1,1,1,1,8, 1,0,4,5,1, 2,2,0,-1,1, 1,2,0,2,1, 2,3,0,1,1, 1,4,1,1,1, 0 };
int charInfo_g[] = { 1,1,4,3,1, 1,1,6,3,1, 1,0,5,1,1, 1,1,8,3,1, 1,4,4,1,4, 2,1,4,-1,1, 2,0,8,1,1, 2,0,6,1,1, 2,4,8,-1,1, 0};
int charInfo_h[] = { 1,0,0,1,9, 2,2,4,-2,2, 1,2,4,2,1, 2,3,4,1,1, 1,4,5,1,4, 0};
int charInfo_i[] = { 1,2,2,1,1, 1,2,4,1,5, 1,0,8,5,1, 1,1,4,2,1, 0};
int charInfo_j[] = { 1,3,2,1,1, 1,3,4,1,4, 1,0,6,1,2, 1,1,8,2,1, 2,0,8,1,1, 2,3,8,-1,1, 0};
//int charInfo_k[] = { 1,0,0,1,9, 2,0,7,4,2, 2,1,8,2,1, 2,4,5,-4,2, 2,3,5,-2,1, 2,1,6,-1,1, 2,0,7,1,1, 0 };
int charInfo_k[] = { 1,0,0,1,9, 2,4,4,-4,4, 2,2,6,2,3, 0 };
int charInfo_l[] = { 1,2,0,1,9, 1,0,8,5,1, 1,1,0,1,1, 0 };
int charInfo_m[] = { 1,0,4,1,5, 2,1,4,1,1, 2,1,4,-1,1, 2,3,4,-1,1, 2,3,4,1,1, 1,2,5,1,4, 1,4,5,1,4, 0 };
int charInfo_n[] = { 1,0,4,1,5, 2,2,4,-2,2, 1,2,4,2,1, 2,3,4,1,1, 1,4,5,1,4, 0 };
int charInfo_o[] = { 1,1,4,3,1, 1,0,5,1,3, 2,1,4,-1,1, 2,0,8,1,1, 1,1,8,3,1, 2,3,4,1,1, 2,4,8,-1,1, 1,4,5,1,3, 0 };
int charInfo_p[] = { 1,0,4,1,5, 1,1,4,3,1, 1,1,6,3,1, 1,4,5,1,1, 2,3,4,1,1, 2,4,6,-1,1, 0 };
int charInfo_q[] = { 1,1,4,3,1, 1,1,6,3,1, 1,0,5,1,1, 1,4,4,1,5, 2,1,4,-1,1, 2,0,6,1,1, 0};
int charInfo_r[] = { 1,0,4,1,5, 2,2,4,-2,2, 1,2,4,2,1, 2,3,4,1,1, 1,4,5,1,1, 0 };
int charInfo_s[] = { 1,1,4,3,1, 1,1,6,3,1, 1,1,8,3,1, 2,1,4,-1,1, 2,3,4,1,1, 2,0,6,1,1, 2,3,6,1,1, 2,4,8,-1,1, 2,0,8,1,1, 1,0,5,1,1, 1,4,7,1,1, 0 };
int charInfo_t[] = { 1,2,0,1,9, 1,0,4,5,1, 0 };
int charInfo_u[] = { 1,0,4,1,3, 1,4,4,1,5, 2,0,7,2,2, 1,2,8,1,1, 2,4,7,-2,2, 0 };
int charInfo_v[] = { 2,0,4,2,5, 2,4,4,-2,5, 0 };
int charInfo_w[] = { 2,0,8,1,1, 2,2,8,-1,1, 2,2,8,1,1, 2,4,8,-1,1, 1,0,4,1,4, 1,2,4,1,4, 1,4,4,1,4, 0};
int charInfo_x[] = { 2,0,4,4,5, 2,4,4,-4,5, 0 };
int charInfo_y[] = { 1,1,6,3,1, 1,0,4,1,2, 1,1,8,3,1, 1,4,4,1,4, 2,0,8,1,1, 2,0,6,1,1, 2,4,8,-1,1, 0};
int charInfo_z[] = { 1,0,4,4,1, 1,1,8,4,1, 2,4,4,-4,5 };

int charInfo_OPENBRAC2[] = { 1,2,0,3,1, 1,2,8,3,1, 1,1,1,1,3, 1,1,5,1,3, 1,0,4,1,1, 2,1,4,-1,1, 2,0,4,1,1, 2,2,0,-1,1, 2,1,8,1,1, 0};
int charInfo_SEPERATOR[] = { 1,2,0,1,9, 0 };
int charInfo_CLOSEBRAC2[] = { 1,0,0,3,1, 1,0,8,3,1, 1,3,1,1,3, 1,3,5,1,3, 1,4,4,1,1, 2,3,4,1,1, 2,4,4,-1,1, 2,2,0,1,1, 2,3,8,-1,1, 0};
int charInfo_TILDE[] = { 2,1,4,-1,1, 2,1,4,2,2, 2,4,5,-1,1, 0};

int * betterQualChars[] = {

charInfo_SPACE, charInfo_EXCLAIM, charInfo_DBLQUOTE, charInfo_POUND, charInfo_DOLSIGN, charInfo_PERCENT, charInfo_ADDRESS, charInfo_SNGLQUOTE, charInfo_OPENPAREN, charInfo_CLOSEPAREN, charInfo_STAR, charInfo_PLUS, charInfo_COMMA, charInfo_MINUS, charInfo_PERIOD, charInfo_SLASH,

charInfo_0, charInfo_1, charInfo_2, charInfo_3, charInfo_4, charInfo_5, charInfo_6, charInfo_7, charInfo_8, charInfo_9,

charInfo_COLON, charInfo_SEMICOLON, charInfo_LESSTHAN, charInfo_EQUAL, charInfo_GREATERTHAN, charInfo_QUESTION, charInfo_ATSIGN,

charInfo_A, charInfo_B, charInfo_C, charInfo_D, charInfo_E, charInfo_F, charInfo_G, charInfo_H, charInfo_I, charInfo_J, charInfo_K, charInfo_L, charInfo_M, charInfo_N, charInfo_O, charInfo_P, charInfo_Q, charInfo_R, charInfo_S, charInfo_T, charInfo_U, charInfo_V, charInfo_W, charInfo_X, charInfo_Y, charInfo_Z,

charInfo_OPENBRACKET, charInfo_BACKSLASH, charInfo_CLOSEBRACKET, charInfo_CARET, charInfo_UNDER, charInfo_ACCENT,

charInfo_a, charInfo_b, charInfo_c, charInfo_d, charInfo_e, charInfo_f, charInfo_g, charInfo_h, charInfo_i, charInfo_j, charInfo_k, charInfo_l, charInfo_m, charInfo_n, charInfo_o, charInfo_p, charInfo_q, charInfo_r, charInfo_s, charInfo_t, charInfo_u, charInfo_v, charInfo_w, charInfo_x, charInfo_y, charInfo_z,

charInfo_OPENBRAC2, charInfo_SEPERATOR, charInfo_CLOSEBRAC2, charInfo_TILDE
};

Uint32 * textPixels;
int textWINDOW_WIDTH;
void textRectangle( int x, int y, int width, int height, int color, windowSection WINDOW) {
	if (x > WINDOW.X2 || y > WINDOW.Y2) {return;}		// don't draw if totally out of frame
	int xmax = x + width;
	int ymax = y + height;
	if (xmax < WINDOW.X1 || ymax < WINDOW.Y1) {return;}	// don't draw if totally out of frame
	if (xmax > WINDOW.X2) {xmax = WINDOW.X2;}
	if (ymax > WINDOW.Y2) {ymax = WINDOW.Y2;}
	if (x < WINDOW.X1) {x = WINDOW.X1;}
	if (y < WINDOW.Y1) {y = WINDOW.Y1;}
	int j = y;
	while (j < ymax) {
		int i = x;
		while (i < xmax) {
			textPixels[textWINDOW_WIDTH * j + i] = color;
			i++;
		}
		j++;
	}
}

void drawShearLine( int x, int y, int width, int height, int size, int color, windowSection WINDOW ) {
	int x1, x2, drawMemStart, drawMemEnd;
	float slope = (float) width / (float) height;

	int j = 0;
	int yMax = height;
	if (y < WINDOW.Y1) {j = WINDOW.Y1 - y;}
	if (y + height >= WINDOW.Y2) {yMax = WINDOW.Y2 - y - 1; }

	while ( j < yMax ) {
		x1 = x + (j * width) / height;// + ((j * width) % height)/(height/2);
		x2 = x1 + size;
		if (x1 < WINDOW.X1) {x1 = WINDOW.X1;}
		if (x2 >= WINDOW.X2) {x2 = WINDOW.X2 - 1;}
		drawMemStart = textWINDOW_WIDTH * (y + j) + x1;
		drawMemEnd = textWINDOW_WIDTH * (y+j) + x2;
		while (drawMemStart < drawMemEnd) {
			textPixels[ drawMemStart ] = color;
			drawMemStart++;
		}
		j++;
	}
}

void betterQualChar( int * charInfo, int color, int x, int y, int size, windowSection WINDOW ) {
	int index = 0;
	while (index < 100) {
		if (!charInfo[index]) {break;}
		if (charInfo[index] == 1) {
			textRectangle( x + size * charInfo[index + 1], y + size * charInfo[index + 2], charInfo[index + 3] * size, charInfo[index + 4] * size, color, WINDOW );
		}
		else if (charInfo[index] == 2) {
			drawShearLine( x + size * charInfo[index + 1], y + size * charInfo[index + 2], size * charInfo[index + 3], size * charInfo[index + 4], size, color, WINDOW );
		}
		index += 5;
	}
}

void betterQualString( drawData drawInformation ) {
	//cout << "STRING" << endl;
	textPixels = drawInformation.screen -> screen;
	textWINDOW_WIDTH = drawInformation.screen -> windowWidth;
	windowSection WINDOW = *(drawInformation.window);

	char * stringPointer = (char *) drawInformation.dataPointer;
	int x = drawInformation.arguments[0] + WINDOW.X1;
	int y = drawInformation.arguments[1] + WINDOW.Y1;
	int width = drawInformation.arguments[2];
	int size = drawInformation.arguments[3];
	int color = drawInformation.arguments[4];
	int charX = drawInformation.arguments[5];

	int i = 0;
	int minX = x;
	int maxX = x + width - 6 * size;
	x += 6 * size * charX;
	char currentChar = * stringPointer;
	while (currentChar) {
		if (currentChar >= 31 && currentChar < 127) {
			betterQualChar( betterQualChars[ currentChar - 32 ], color, x, y, size, WINDOW );
		}
		x += 6 * size;
		if (x >= maxX) {
			x = minX;
			y += 10 * size;
		}
		i++;
		currentChar = * (stringPointer + i);
	}
}

void drawCharacter(char character, int x ,int y ,int size ,int color,  windowSection WINDOW ) {

	character -= 32;
	int i, j;
	if (size == 1) {
		for ( j = 0; j < 9; j++ ) {
			for ( i = 0; i < 5; i++ ) {
				if (characters[5 * j + i + 45 * character] && y + j < WINDOW.Y2 && x + 1 < WINDOW.X2) {
					textPixels[textWINDOW_WIDTH * (y + j) + x + i] = color;			
				}
			}
		}
	}
	else {
		for ( j = 0; j < 9; j++ ) {
		for ( i = 0; i < 5; i++ ) {
			if (characters[5 * j + i + 45 * character]) {
				int x1 = x + i * size;
				int y1 = y + j * size;
				if (x1 >= WINDOW.X1 && x1 + size < WINDOW.X2 && y1 >= WINDOW.Y1 && y1 + size < WINDOW.Y2) {
					int drawMemStart = textWINDOW_WIDTH * y1 + x1;
					int i1, j1;
					for (i1 = 0; i1 < size; i1++) {
					for (j1 = 0; j1 < size; j1++) {
						textPixels[drawMemStart] = color;
						drawMemStart++;
					}
						drawMemStart += textWINDOW_WIDTH - size;
					}
				}				
			}
		}
		}
	}
}

//void drawString(char * stringPointer, int x, int y, int width, char size, int color ) {
void drawString(drawData drawInformation) {
	textPixels = drawInformation.screen -> screen;
	textWINDOW_WIDTH = drawInformation.screen -> windowWidth;
	windowSection WINDOW = *(drawInformation.window);

	char * stringPointer = (char *) drawInformation.dataPointer;
	int x = drawInformation.arguments[0] + WINDOW.X1;
	int y = drawInformation.arguments[1] + WINDOW.Y1;
	int width = drawInformation.arguments[2];
	int size = drawInformation.arguments[3];
	int color = drawInformation.arguments[4];
	int charX = drawInformation.arguments[5];

	int i = 0;
	int minX = x;
	int maxX = x + width - 6 * size;
	x += 6 * size * charX;
	char currentChar = * stringPointer;
	while (currentChar) {
		drawCharacter( currentChar , x, y, size, color, WINDOW);
		x += 6 * size;
		if (x >= maxX) {
			x = minX;
			y += 10 * size;
		}
		i++;
		currentChar = * (stringPointer + i);
	}
}
